1. TypeFIlterAttribute

public class ClaimRequirementAttribute : TypeFilterAttribute
    {
        public ClaimRequirementAttribute(string claimType, string claimValue) : base(typeof(ClaimRequirementFilter))
        {
            Arguments = new object[] {new Claim(claimType, claimValue) };
        }
    }

    public class ClaimRequirementFilter : IAsyncActionFilter
    {
        readonly Claim _claim;

        public ClaimRequirementFilter(Claim claim)
        {
            _claim = claim;
        }

        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {            
            var hasClaim = context.HttpContext.User.Claims.Any(c => c.Type == _claim.Type && c.Value == _claim.Value);
            if (!hasClaim)
            {
                context.Result = new UnauthorizedResult();

            }
            else
            {
                await next();
            }
        }
    }

    [Route("api/resource")]
    public class MyController : Controller
    {
        [ClaimRequirement(MyClaimTypes.Permission, "CanReadResource")]
        [HttpGet]
        public IActionResult GetResource()
        {
            return Ok();
        }
    }
    
    2. AuthorizeAttribute, normally with use with PolicyProvider, this only add permission requirment
     public class PermissionAuthorizeAttribute : AuthorizeAttribute
    {
        public PermissionAuthorizeAttribute(string permissionSet, string permissionValue)
        {
            if (string.IsNullOrEmpty(permissionSet) || string.IsNullOrEmpty(permissionValue))
            {
                throw new ArgumentNullException("Permission Set and Permission Value are required.");
            }
            var resourceName = string.Format("{0}====={1}", permissionSet, permissionValue);
            Policy = resourceName;
        }

    }
    
    https://kimsereyblog.blogspot.com/2017/04/filters-in-asp-net-core-what-are-they.html
    
